<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dobby.mzdict.mapper.WordMapper">
    <resultMap id="WordResultMap" type="com.dobby.mzdict.vo.WordVO">
        <result property="id" column="id" />
        <result property="wordTitle" column="wordtitle" />
        <result property="meaning" column="meaning" />
        <result property="usingExample" column="using_example" />
        <result property="acceptStatus" column="accept_status" />
        <result property="createTime" column="created_at" />
        <result property="updateTime" column="updated_at" />
        <result property="userId" column="user_id" />
        <result property="liked" column="liked" />
        <result property="scrapped" column="scrapped" />
    </resultMap>

    <select id="getWords" resultMap="WordResultMap">
        select
            w.id as word_id,
            w.wordtitle,
            w.meaning,
            w.using_example,
            w.user_id as word_user_id,
            w.created_at as word_created_at,
            case when l.user_id is not null then true else false end as liked,
            case when s.user_id is not null then true else false end as scrapped
        from
            word w
                left join
            likes l on w.id = l.word_id and l.user_id = #{userId}
                left JOIN
            scrap s on w.id = s.word_id and s.user_id = #{userId};
    </select>

    <select id="getWordsByNonMember" resultMap="WordResultMap">
        select
            w.id as word_id,
            w.wordtitle,
            w.meaning,
            w.using_example,
            w.user_id as word_user_id,
            w.created_at as word_created_at,
            case when l.user_id is not null then true else false end as liked,
            case when s.user_id is not null then true else false end as scrapped
        from
            word w
                left join
            likes l on w.id = l.word_id and l.user_id = null
                left JOIN
            scrap s on w.id = s.word_id and s.user_id = null;
    </select>

    <select id="getWord" resultMap="WordResultMap">
        select
            w.id as word_id,
            w.wordtitle,
            w.meaning,
            w.using_example,
            w.user_id as word_user_id,
            w.created_at as word_created_at,
            case when l.user_id is not null then true else false end as liked,
            case when s.user_id is not null then true else false end as scrapped
        from
            word w
                left join
            likes l on w.id = l.word_id and l.user_id = #{userId}
                left JOIN
            scrap s on w.id = s.word_id and s.user_id = #{userId}
        where id = #{id};
    </select>

    <select id="getWordByNonMember" resultMap="WordResultMap">
        select
            w.id as word_id,
            w.wordtitle,
            w.meaning,
            w.using_example,
            w.user_id as word_user_id,
            w.created_at as word_created_at,
            case when l.user_id is not null then true else false end as liked,
            case when s.user_id is not null then true else false end as scrapped
        from
            word w
                left join
            likes l on w.id = l.word_id and l.user_id = null
                left JOIN
            scrap s on w.id = s.word_id and s.user_id = null
        where id = #{id};
    </select>



    <update id="updateWord">
        update word
        set
            wordtitle = #{wordTitle},
            meaning = #{meaning},
            using_example = #{usingExample},
            updated_at = #{updateTime}
        where id = #{id}
    </update>

    <delete id="deleteWord">
        delete from word
        where id = #{id}
    </delete>

    <insert id="insertWord">
        insert into word(wordtitle, meaning, using_example, accept_status,created_at, updated_at, user_id)
        values(#{wordTitle}, #{meaning}, #{usingExample}, #{acceptStatus}, #{createTime}, #{updateTime}, #{userId})
    </insert>

    <select id="findWord" resultMap="WordResultMap">
        select
            w.id as word_id,
            w.wordtitle,
            w.meaning,
            w.using_example,
            w.user_id as word_user_id,
            w.created_at as word_created_at,
            case when l.user_id is not null then true else false end as liked,
            case when s.user_id is not null then true else false end as scrapped
        from
            word w
                left join
            likes l on w.id = l.word_id and l.user_id = #{userId}
                left JOIN
            scrap s on w.id = s.word_id and s.user_id = #{uesrId}
        where wordtitle like concat('%', #{keyWord}, '%') and accept_status > 0;
    </select>

    <select id="findWordByNonMember" resultMap="WordResultMap">
        select
            w.id as word_id,
            w.wordtitle,
            w.meaning,
            w.using_example,
            w.user_id as word_user_id,
            w.created_at as word_created_at,
            case when l.user_id is not null then true else false end as liked,
            case when s.user_id is not null then true else false end as scrapped
        from
            word w
                left join
            likes l on w.id = l.word_id and l.user_id = null
                left JOIN
            scrap s on w.id = s.word_id and s.user_id = null
        where wordtitle like concat('%', #{keyWord}, '%') and accept_status > 0;
    </select>


    <select id="getNotAcceptWord" resultMap="WordResultMap">
        select *
        from word
        where 0 >= accept_status;
    </select>
</mapper>